quest training_grandmaster_buff_skill begin
	state start begin
		when 61031.use begin
			if get_time() < pc.getqf("next_time") then
				if pc.is_skill_book_no_delay() then
					say_title(locale_quest(9913))
					say(locale_quest(9935))
					wait()
				else
					say_title(locale_quest(9913))
					say(locale_quest(9936))
					return
				end
			end

			local result = training_grandmaster_buff_skill.BuildGrandMasterSkillList()

			local vnum_list = result[1]
			local name_list = result[2]

			if table.getn(vnum_list) == 0 then
				say_title(locale_quest(9913))
				say(locale_quest(9937))
				return
			end

			say_title(locale_quest(9913))
			say(locale_quest(9938))

			local menu_list = {}
			table.foreach(name_list, function(i, name) table.insert(menu_list, name) end)
			table.insert(menu_list, locale_quest(2426))

			local s = select_table(menu_list)

			if table.getn(menu_list) == s then
				return
			end

			local skill_name = name_list[s]
			local skill_vnum = vnum_list[s]
			local skill_level = pc.get_skill_level(skill_vnum)
			local cur_alignment = pc.get_real_alignment()
			local need_alignment = 1000 + 500 * (skill_level - 30)

			test_chat(string.format(locale_quest(9939), cur_alignment .. "" .. locale_quest(9940) .. need_alignment))

			local title = string.format(locale_quest(9941), skill_name, (skill_level -30 + 1))

			say_title(locale_quest(9913))
			say(locale_quest(9942))

			if cur_alignment < (-19000 + need_alignment) then
				say_reward(locale_quest(9914))
				return
			end

			if cur_alignment < 0 then
				say_reward(string.format(locale_quest(9915), need_alignment, need_alignment * 2))
				say_reward(locale_quest(9916))
				need_alignment = need_alignment * 2
			elseif cur_alignment < need_alignment then
				say_reward(string.format(locale_quest(9917), need_alignment))
				say_reward(locale_quest(9918))
			else
				say_reward(string.format(locale_quest(9917), need_alignment))
			end

			local s = select(locale_quest(2669), locale_quest(2426))
			if s == 2 then
				return
			end

			if cur_alignment >= 0 and cur_alignment < need_alignment then
				say_title(title)
				say_reward(locale_quest(9919))
				say(locale_quest(9920))
				say_reward(locale_quest(9921))
				say(locale_quest(9922))
				local s = input()
				s = string.gsub(s, "(%a*)%s*", "%1")
				s = string.lower(string.gsub(s, "(%a*)%s*", "%1"))

				local t = string.gsub(locale_quest(9912), "(%a*)%s*", "%1")
				t = string.lower(string.gsub(locale_quest(9912), "(%a*)%s*", "%1"))

				if s != t then
					return
				end
			end

			if get_time() < pc.getqf("next_time") then
				if pc.is_skill_book_no_delay() then
					pc.remove_skill_book_no_delay()
				else
					say_title(locale_quest(9913))
					return
				end
			end

			pc.setqf("next_time", get_time() + time_hour_to_sec(number(8, 12)))

			if need_alignment > 0 then
				if pc.count_item(61031) > 0 then
					if pc.learn_grand_master_skill(skill_vnum) then
						pc.change_alignment(-need_alignment)

						say_title(title)
						say_reward(locale_quest(9923))

						if 40 == pc.get_skill_level(skill_vnum) then
							say(locale_quest(9925))
							say(string.format(locale_quest(9926), skill_name))
							say(locale_quest(9927))
						else
							say(locale_quest(9928))
							say(string.format(locale_quest(9929), skill_name, (skill_level -30 + 1 + 1)))
						end
						say_reward(locale_quest(9930))
						say_reward(string.format(locale_quest(9931), need_alignment))
					else
						say_title(title)
						say_reward(locale_quest(9932))
						say(locale_quest(9933))
						say_reward(locale_quest(9934))
						pc.change_alignment(-number(need_alignment / 3, need_alignment / 2))
					end
					pc.remove_item(61031)
				else
					char_log(0, "HACK 50513", pc.get_name())
				end
			end
		end

		function BuildGrandMasterSkillList()
			GRAND_MASTER_SKILL_LEVEL = 30
			PERFECT_MASTER_SKILL_LEVEL = 40

			local skill_list = { 164, 165, 166, 167 }
			local ret_vnum_list = {}
			local ret_name_list = {}

			table.foreach(skill_list,
				function(i, skill_vnum)
					local skill_level = pc.get_skill_level(skill_vnum)

					if skill_level >= GRAND_MASTER_SKILL_LEVEL and skill_level < PERFECT_MASTER_SKILL_LEVEL then
						table.insert(ret_vnum_list, skill_vnum)
						local name = skill_name(skill_vnum)
						if name == nil then name = skill_vnum end
						table.insert(ret_name_list, name)
					end
				end
			)

			return {ret_vnum_list, ret_name_list}
		end
	end
end
